---
AWSTemplateFormatVersion: "2010-09-09"

Description:
  This template builds a VPC Network Template with Cloudformation. In prod this template creates a routable network with public and private subnets in all AvailabilityZones.
  VPC naming structure ${ServiceName}-${Stage}

Parameters:

  ServiceName:
    Default: default
    Description: The logical name for this cloudformation resource, it could be the application name, project name etc
    Type: String

  Stage:
    Description: Product Environment for the Stack
    Type: String

  VPCCIDR:
    Default: 10.11.224.0/19
    Description: VPC CIDR (X.X.0.0/19)
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

  CIDRCount:
    Default: 8
    Description: The number of CIDRs to generate.
    Type: String
    AllowedPattern: "(\\d{1,2})"

  CIDRBits:
    Default: 10
    Description: The number of subnet bits for the CIDR
    Type: String
    AllowedPattern: "(\\d{1,2})"

  LocalNatPerAZ:
    Description: A local NAT per AZ ensures instances in an AZ can reach the internet regardless of connectivity between the AZs. This is a Best Practice HA config.
    Type: String
    Default: False

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Business Settings"
        Parameters:
          - ServiceName
          - Stage
      - Label:
          default: "VPC Settings"
        Parameters:
          - VPCCIDR
          - CIDRCount
          - CIDRBits
          - LocalNatPerAZ

Conditions:

  DoLocalNatPerAZ?:
    !Or [ !Equals [ !Ref LocalNatPerAZ, "true" ], !Equals [ !Ref Stage, "prod" ] ]

  IsProduction?:
    !Equals [ !Ref Stage, "prod" ]

  IsNonProd?:
    !Equals [ !Ref Stage, "nonprod" ]

Resources:

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  NatGatewayEIP1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NatGatewayEIP2:
    Condition: DoLocalNatPerAZ?
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  NatGatewayAZ1:
    Type: "AWS::EC2::NatGateway"
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref PublicSubnetAZ1

  NatGatewayAZ2:
    Type: "AWS::EC2::NatGateway"
    Condition: DoLocalNatPerAZ?
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref PublicSubnetAZ2

  PrivateRouteAZ1:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        !Ref NatGatewayAZ1
      RouteTableId:
        !Ref PrivateRouteTableAZ1

  PrivateRouteTableAZ1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Sub ${ServiceName}-${Stage}
        -
          Key: ServiceName
          Value: !Ref ServiceName
        -
          Key: Stage
          Value: !Ref Stage

  PrivateSubnetAZ1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        !Select [0, !GetAZs ""]
        # !Ref AvailabilityZone1
      CidrBlock:
        !Select [2, !Cidr [ !Ref VPCCIDR, !Ref CIDRCount , !Ref CIDRBits ]]
        # !Ref PrivateSubnetCidrAZ1
      VpcId:
        !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Sub ${ServiceName}-${Stage}
        -
          Key: ServiceName
          Value: !Ref ServiceName
        -
          Key: Stage
          Value: !Ref Stage

  PrivateSubnetRouteTableAssociationAZ1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        !Ref PrivateRouteTableAZ1
      SubnetId:
        !Ref PrivateSubnetAZ1

  PrivateRouteAZ2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        !If ['DoLocalNatPerAZ?', !Ref NatGatewayAZ2, !Ref NatGatewayAZ1]
      RouteTableId:
        !Ref PrivateRouteTableAZ2

  PrivateRouteTableAZ2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Sub ${ServiceName}-${Stage}
        -
          Key: ServiceName
          Value: !Ref ServiceName
        -
          Key: Stage
          Value: !Ref Stage

  PrivateSubnetAZ2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        # !Ref AvailabilityZone2
        !Select [1, !GetAZs ""]
      CidrBlock:
        !Select [3, !Cidr [ !Ref VPCCIDR, !Ref CIDRCount , !Ref CIDRBits ]]
        # !Ref PrivateSubnetCidrAZ2
      VpcId:
        !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Sub ${ServiceName}-${Stage}
        -
          Key: ServiceName
          Value: !Ref ServiceName
        -
          Key: Stage
          Value: !Ref Stage

  PrivateSubnetRouteTableAssociationAZ2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        !Ref PrivateRouteTableAZ2
      SubnetId:
        !Ref PrivateSubnetAZ2


  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        !Ref InternetGateway
      RouteTableId:
        !Ref PublicRouteTable

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Sub ${ServiceName}-${Stage}
        -
          Key: ServiceName
          Value: !Ref ServiceName
        -
          Key: Stage
          Value: !Ref Stage

  PublicSubnetAZ1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        !Select [0, !GetAZs ""]
        # !Ref AvailabilityZone1
      CidrBlock:
        !Select [0, !Cidr [ !Ref VPCCIDR, !Ref CIDRCount , !Ref CIDRBits ]]
        # !Ref PublicSubnetCidrAZ1
      VpcId:
        !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Sub ${ServiceName}-${Stage}
        -
          Key: ServiceName
          Value: !Ref ServiceName
        -
          Key: Stage
          Value: !Ref Stage

  PublicSubnetAZ2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        # !Ref AvailabilityZone2
        !Select [1, !GetAZs ""]
      CidrBlock:
        !Select [1, !Cidr [ !Ref VPCCIDR, !Ref CIDRCount , !Ref CIDRBits ]]
        # !Ref PublicSubnetCidrAZ2
      VpcId:
        !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Sub ${ServiceName}-${Stage}
        -
          Key: ServiceName
          Value: !Ref ServiceName
        -
          Key: Stage
          Value: !Ref Stage


  PublicSubnetRouteTableAssociationAZ1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        !Ref PublicRouteTable
      SubnetId:
        !Ref PublicSubnetAZ1

  PublicSubnetRouteTableAssociationAZ2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        !Ref PublicRouteTable
      SubnetId:
        !Ref PublicSubnetAZ2

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock:
        !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        -
          Key: Name
          Value: !Sub ${ServiceName}-${Stage}
        -
          Key: ServiceName
          Value: !Ref ServiceName
        -
          Key: Stage
          Value: !Ref Stage


  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    DependsOn: InternetGateway
    Properties:
      InternetGatewayId:
        !Ref InternetGateway
      VpcId:
        !Ref VPC

Outputs:
  DefaultSecurityGroup:
    Description: The Default SecurityGroup for the VPC we create in this Stack.
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}:DefaultSecurityGroup

  VpcId:
    Description: The VpcId for the Stack
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VpcId
